#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: f0455b08-a972-4925-b4e5-637ab097641a
# Source File: VMware Linked Cloner.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
DQIAAB+LCAAAAAAABACNkdFOgzAUhu+X7B0a7llhwiZJ6YXMGROnZi67NQc4mGppSQF1b28RMCwm
xsuv/c/3p6dsj5l+R3PaQAN8PiOEPRr9ilnzDRaPaGqhFfcXPqMjDHdbIfF2wwsvCMPUu3QhWi/d
IFqGbhpg6K4u1pB60XoV+MDoEB5Gh5bDqULuMTrFUa5lbusInbbVAwxI9ligQZXhPZQYOw65aoXM
Y8dz+FMDpmmrRVXXffnfowlI6e5AqK025XNVF1PXeG5lxb9lN1KnIK3Kn6hIossSVH792aDqdhk7
B9Oiw/t0bRv8s4Ye+nf/7KmnByNehALZBbpeftx9gEFyJ9Qb5iSRWqGxwsoOMforPZ8xevb9X3Lf
aSUNAgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.118
     Generated on:       1/18/2017 11:14 AM
     Generated by:       Drew Green
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YgMAAB+LCAAAAAAABAC9k01LA0EMhu9C/8PQ87If3a5rYXZBWnopqFhRr9lttgzOR0lmLPvvbatU
0YMgsuSSNyF5CEnkPbbuFalfgAdxcFg5W40n43p0IYS8JbVVFvRSabwBg/XaA/mwi3fMMvmRPdVc
M6NptEI+6c9IXxtuHWnVROLxgzSN06NFYh60D4SVxeAJdCTuwqFHu8L+wb2grZqyhKItLrNZPsX0
aiaTc9fvlHXPHs0QjPhJ2Y3bc7x0ZHgQ4nFPw4AI9spu/8JK867oyi7LNkUKOfzOejZ6kJnmjvD/
QWf5fvIy+fpT9RvJGdnIYgMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
	
	Write-Output "Importing VMware SnapIns..."
	if (!(Get-Module -Name VMware.VimAutomation.Core -ErrorAction SilentlyContinue))
	{
		. "C:\Program Files (x86)\VMware\Infrastructure\vSphere PowerCLI\Scripts\Initialize-PowerCLIEnvironment.ps1"
	}
	Write-Output "Done"
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
BisAAB+LCAAAAAAABADdml1v6jgQhu9X2v9g5WpXQoUQPiVAKuyptFo4rZoeuneVSQbIYmzkOBTO
r18n4fMEik1JBFUlVMDOzPh9mGTGbjyDw+bAl39hgZH8x/cYbRpFo/X7bwg1Hrk38igmDx6B73gK
rR726APj07uZP2zkE1/Hkwb/gSOQWM6gadhLX8D07tWjLnv378K58WsOHfoqh/orH0p3hfAvhzoB
EQGHJoVAcExy6CkYEM/5B5YvbAK0OahWcdkpV8y6VYJCrW4gKl1pGmtXDeSMPeJyOdToMCo4I34c
nvT1ibMZcLFczekQD6iwvZ9gtCpWMYeqxVIjvx50ZFIYubFZmZPDbYG5eGK+J2SYRqsjDQK3HQ5A
T859gYUwWnN7NgYOqOvRCbioQxgFnpz7bS4vvZrYZdjd+vgWvm3kowHr0adVC4232SJ14cRCfIf3
fu8j4ZJLc0+dMeNG64XNcqjNhGASsS4MRQ49e6OxSKxP8hJd5uBYFMuS/lulgsKkWP21zwoTYrqK
dWmhqGLgBQ/+pi4sjFYtqXE+lk1dxHYgV4amruEgMhOReZ6MsYIKy/ON4gEBCfcDJj5oqVyqVHOo
Uqsrq7wTlbLQ1bLU2dLSWcWhOBOouvLDh77nB5jYYkmgjZ1Jh5Ho18KDg/N3c4dMis5kL/i36KNf
Eog2il08AJI6iSS0Ev02Iw3Pzyn6WaRcDLOIWVTma99XZcTMQkGbMbOsDJl0CPV7SNGlcM498UYy
/p7nugQOr9tV4/IMPgu4A0+MkYyJKeWQWUsm+g+J2XU3XWiSD0PHoFn7hBSd+grYhM/QvmA86yxT
UhRyB5mNq6nyopL5Ylx0/PkSqIAvZOUUKvjAiAtcD5mt+mbxjFtMwnq6WUMDg61jSNmzBA/hU/9t
4WBTPPPHTHyGAu3bxtpouuKbyuJr+PMFJNetb/fF1s33GpXpWSorFbKRykqepKav52fSwiDSzoAt
4hTmZ97ICMPBQmbS0aY6PlbofXxj0eiA7Ies1wepqxQjNuNCI5ItnNXbA2fzOHSb7ETts5J6XyUR
tR4+pqVSl5zNz4EO8LXzE91KbxKd6OamVGfuoRMFfE1JJ3nxq4dGluxhsX6b3EQp5wxw1kFfEzuV
22On37tNbMJ0o3+jktFe1R3q4MP6bgvfBiJ5ATca3xljOgrtbKN5OzTgs/39DPcLHwMxCzSr54tu
GEYcVVSelnsySo94FJR13uwwxlEqzHgG7D5SslQ2YTtyrUgby1ol3HkbK9NdKdRk2tWsFlVGvzLu
vnI8O7avd05GpJOM6ntpKaq65/Hmfqbt4GhTUyej7fuq3iYoW/ptArXRtmAz9SwYdRX+WLmPbOBz
4H/q9RjkUh9d6L1TFHKxoq3POHvur9zbzref3hrNjlU6+eF/rv2sAVtsLFXGFI9UnMNY6Hv4wUG6
jnMSB31JPLI6xCGoZIFKZ1I+w7HlKXxY0jqRsXExzQMZ6hsY6s5c5EjGJvqTJzL239z7PkwlA+Cv
x64+WbamvsM48QYX4KiR31z1VysxuVnYuPiv47TFsI+VjSGO32X5c46tgjUsD6tD03TLBWzh07b+
nZJMYuowDpc3tHkbI9/I7557bf0P8khGxQYrAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$txtNewVM = New-Object 'System.Windows.Forms.TextBox'
	$buttonClone = New-Object 'System.Windows.Forms.Button'
	$labelNewVMName = New-Object 'System.Windows.Forms.Label'
	$labelResourcePool = New-Object 'System.Windows.Forms.Label'
	$labelDatastore = New-Object 'System.Windows.Forms.Label'
	$labelDestinationFolder = New-Object 'System.Windows.Forms.Label'
	$labelSnapshot = New-Object 'System.Windows.Forms.Label'
	$labelVM = New-Object 'System.Windows.Forms.Label'
	$listboxFolders = New-Object 'System.Windows.Forms.ListBox'
	$listboxDatastores = New-Object 'System.Windows.Forms.ListBox'
	$listboxSnaps = New-Object 'System.Windows.Forms.ListBox'
	$listboxResPools = New-Object 'System.Windows.Forms.ListBox'
	$listboxVMs = New-Object 'System.Windows.Forms.ListBox'
	$txtOutput = New-Object 'System.Windows.Forms.TextBox'
	$linklabelvCenter = New-Object 'System.Windows.Forms.LinkLabel'
	$lnkUser = New-Object 'System.Windows.Forms.LinkLabel'
	$btnConnect = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load={
		#TODO: Initialize Form Controls here
		#$MainForm.TopMost = $true
		$MainForm.Focus()
		$labelDatastore.TabStop = $false
		$labelDestinationFolder.TabStop = $false
		$labelNewVMName.TabStop = $false
		$labelResourcePool.TabStop = $false
		$labelSnapshot.TabStop = $false
		$labelVM.TabStop = $false
		$txtOutput.TabStop = $false
		
	
	}
	
	
	
	
	
	$btnConnect_Click={
		#TODO: Place custom script here
		if ($global:connected -ne $true)
		{
			if (($global:vCenterServerFQDN -ne $null) -and ($global:creds -ne $null))
			{
				$vc = Connect-VIServer -Server $global:vCenterServerFQDN -Credential $global:creds
				if ($vc.IsConnected)
				{
					$global:connected = $true
					$txtOutput.AppendText("Connected to $global:vCenterServerFQDN")
					$txtOutput.AppendText("`n")
					$btnConnect.Text = "Disconnect"
					
					$vms = Get-VM
					foreach ($vm in $vms)
					{
						$listboxVMs.Items.Add($vm)
					}
					
					$resPools = Get-ResourcePool
					$listboxResPools.display
					
					foreach ($resPool in $resPools)
					{
						$listboxResPools.Items.Add([string]$resPool.Parent + ":" + [string]$resPool.Id)
					}
					
					$folders = Get-Folder -Type VM
					
					foreach ($folder in $folders)
					{
						$listboxFolders.Items.Add($folder)
					}
					
					$datastores = Get-Datastore
					
					foreach ($datastore in $datastores)
					{
						$listboxDatastores.Items.Add($datastore)
					}
					
					$buttonClone.Enabled = $true
					
				}
				
			}
			elseif ($global:creds -eq $null)
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Please set credentials', 'Invalid Credentials') # Casting the method to [void] suppresses the output. 
			}
			elseif ($global:vCenterServerFQDN -eq $null)
			{
				#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
				[void][System.Windows.Forms.MessageBox]::Show('Please set server name', 'Invalid Server') # Casting the method to [void] suppresses the output. 
			}
		}
		else
		{
			Disconnect-VIServer
			$global:connected = $false
			$txtOutput.AppendText("Disconnected from $global:vCenterServerFQDN")
			$txtOutput.AppendText("`n")
			$btnConnect.Text = "Connect"
			$buttonClone.Enabled = $false
			$listboxDatastores.Items.Clear()
			$listboxFolders.Items.Clear()
			$listboxResPools.Items.Clear()
			$listboxSnaps.Items.Clear()
			$listboxVMs.Items.Clear()
		}
		
	}
	
	$lnkUser_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		$global:creds = (Get-Credential)
		if (($global:creds -eq $null) -or ($global:creds -eq ""))
		{
			$lnkUser.Text = "(Username)"
			$global:creds = $null
		}
		else
		{
			$lnkUser.Text = $global:creds.UserName
		}
		
	}
	
	$linklabelvCenter_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		$global:vCenterServerFQDN = [Microsoft.VisualBasic.Interaction]::InputBox("Enter the vCenter Server name", "vCenter Server", "")
		if (($global:vCenterServerFQDN -eq $null) -or ($global:vCenterServerFQDN -eq ""))
		{
			$linklabelvCenter.Text = "(vCenter Server)"
			$global:vCenterServerFQDN = $null
		}
		else
		{
			$linklabelvCenter.Text = $global:vCenterServerFQDN
		}
		
		
	}
	
	
	
	
	#region Control Helper Functions
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$listboxVMs_SelectedIndexChanged={
		#TODO: Place custom script here
		$listboxSnaps.Items.Clear()
		$snaps = Get-Snapshot -VM $listboxVMs.SelectedItem
		foreach ($snap in $snaps)
		{
			$listboxSnaps.Items.Add($snap)
		}
	
	}
	
	
	$buttonClone_Click={
		#TODO: Place custom script here
		cd C:\
		$resPool = $listboxResPools.SelectedItem.ToString()
		$resPool = $resPool.Split(":", 2)[1]
		$resPool = Get-ResourcePool -Id $resPool
		$txtOutput.AppendText("Creating linked clone. Please wait...")
		$txtOutput.AppendText("`n")
		New-VM -Name $txtNewVM.Text -VM $listboxVMs.SelectedItem -Location $listboxFolders.SelectedItem -Datastore $listboxDatastores.SelectedItem -ResourcePool $resPool -LinkedClone -ReferenceSnapshot $listboxSnaps.SelectedItem | Out-String -Stream | ForEach-Object {
			$txtOutput.AppendText($_)
			$MainForm.Update()
		}
		#$cloneVM
		$txtOutput.AppendText("`n")
		$txtOutput.AppendText("Finished clone operation")
		$txtOutput.AppendText("`n")
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_txtNewVM = $txtNewVM.Text
		$script:MainForm_listboxFolders = $listboxFolders.SelectedItems
		$script:MainForm_listboxDatastores = $listboxDatastores.SelectedItems
		$script:MainForm_listboxSnaps = $listboxSnaps.SelectedItems
		$script:MainForm_listboxResPools = $listboxResPools.SelectedItems
		$script:MainForm_listboxVMs = $listboxVMs.SelectedItems
		$script:MainForm_txtOutput = $txtOutput.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonClone.remove_Click($buttonClone_Click)
			$listboxVMs.remove_SelectedIndexChanged($listboxVMs_SelectedIndexChanged)
			$linklabelvCenter.remove_LinkClicked($linklabelvCenter_LinkClicked)
			$lnkUser.remove_LinkClicked($lnkUser_LinkClicked)
			$btnConnect.remove_Click($btnConnect_Click)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($txtNewVM)
	$MainForm.Controls.Add($buttonClone)
	$MainForm.Controls.Add($labelNewVMName)
	$MainForm.Controls.Add($labelResourcePool)
	$MainForm.Controls.Add($labelDatastore)
	$MainForm.Controls.Add($labelDestinationFolder)
	$MainForm.Controls.Add($labelSnapshot)
	$MainForm.Controls.Add($labelVM)
	$MainForm.Controls.Add($listboxFolders)
	$MainForm.Controls.Add($listboxDatastores)
	$MainForm.Controls.Add($listboxSnaps)
	$MainForm.Controls.Add($listboxResPools)
	$MainForm.Controls.Add($listboxVMs)
	$MainForm.Controls.Add($txtOutput)
	$MainForm.Controls.Add($linklabelvCenter)
	$MainForm.Controls.Add($lnkUser)
	$MainForm.Controls.Add($btnConnect)
	$MainForm.ClientSize = '632, 724'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'vSphere Linked Cloner'
	$MainForm.add_Load($MainForm_Load)
	#
	# txtNewVM
	#
	$txtNewVM.Anchor = 'Top, Bottom, Left, Right'
	$txtNewVM.Location = '330, 340'
	$txtNewVM.Name = 'txtNewVM'
	$txtNewVM.Size = '290, 20'
	$txtNewVM.TabIndex = 8
	#
	# buttonClone
	#
	$buttonClone.Anchor = 'Bottom'
	$buttonClone.Enabled = $False
	$buttonClone.Location = '467, 689'
	$buttonClone.Name = 'buttonClone'
	$buttonClone.Size = '75, 23'
	$buttonClone.TabIndex = 9
	$buttonClone.Text = 'Clone'
	$buttonClone.UseVisualStyleBackColor = $True
	$buttonClone.add_Click($buttonClone_Click)
	#
	# labelNewVMName
	#
	$labelNewVMName.Anchor = 'Top, Right'
	$labelNewVMName.Location = '520, 312'
	$labelNewVMName.Name = 'labelNewVMName'
	$labelNewVMName.Size = '100, 23'
	$labelNewVMName.TabIndex = 15
	$labelNewVMName.Text = 'New VM Name'
	$labelNewVMName.TextAlign = 'MiddleRight'
	#
	# labelResourcePool
	#
	$labelResourcePool.Anchor = 'Top, Right'
	$labelResourcePool.Location = '524, 188'
	$labelResourcePool.Name = 'labelResourcePool'
	$labelResourcePool.Size = '100, 23'
	$labelResourcePool.TabIndex = 14
	$labelResourcePool.Text = 'Resource Pool'
	$labelResourcePool.TextAlign = 'MiddleRight'
	#
	# labelDatastore
	#
	$labelDatastore.Anchor = 'Top, Right'
	$labelDatastore.Location = '524, 23'
	$labelDatastore.Name = 'labelDatastore'
	$labelDatastore.Size = '100, 23'
	$labelDatastore.TabIndex = 2
	$labelDatastore.Text = 'Datastore'
	$labelDatastore.TextAlign = 'MiddleRight'
	#
	# labelDestinationFolder
	#
	$labelDestinationFolder.Location = '12, 312'
	$labelDestinationFolder.Name = 'labelDestinationFolder'
	$labelDestinationFolder.Size = '100, 23'
	$labelDestinationFolder.TabIndex = 12
	$labelDestinationFolder.Text = 'Destination Folder'
	$labelDestinationFolder.TextAlign = 'MiddleLeft'
	#
	# labelSnapshot
	#
	$labelSnapshot.Location = '12, 188'
	$labelSnapshot.Name = 'labelSnapshot'
	$labelSnapshot.Size = '100, 23'
	$labelSnapshot.TabIndex = 11
	$labelSnapshot.Text = 'Snapshot'
	$labelSnapshot.TextAlign = 'MiddleLeft'
	#
	# labelVM
	#
	$labelVM.Location = '12, 23'
	$labelVM.Name = 'labelVM'
	$labelVM.Size = '100, 23'
	$labelVM.TabIndex = 10
	$labelVM.Text = 'VM'
	$labelVM.TextAlign = 'MiddleLeft'
	#
	# listboxFolders
	#
	$listboxFolders.Anchor = 'Top, Bottom, Left, Right'
	$listboxFolders.FormattingEnabled = $True
	$listboxFolders.Location = '12, 340'
	$listboxFolders.Name = 'listboxFolders'
	$listboxFolders.Size = '290, 95'
	$listboxFolders.Sorted = $True
	$listboxFolders.TabIndex = 7
	#
	# listboxDatastores
	#
	$listboxDatastores.Anchor = 'Top, Bottom, Left, Right'
	$listboxDatastores.FormattingEnabled = $True
	$listboxDatastores.Location = '330, 49'
	$listboxDatastores.Name = 'listboxDatastores'
	$listboxDatastores.Size = '290, 134'
	$listboxDatastores.Sorted = $True
	$listboxDatastores.TabIndex = 4
	#
	# listboxSnaps
	#
	$listboxSnaps.Anchor = 'Top, Bottom, Left, Right'
	$listboxSnaps.FormattingEnabled = $True
	$listboxSnaps.Location = '12, 214'
	$listboxSnaps.Name = 'listboxSnaps'
	$listboxSnaps.Size = '290, 95'
	$listboxSnaps.Sorted = $True
	$listboxSnaps.TabIndex = 5
	#
	# listboxResPools
	#
	$listboxResPools.Anchor = 'Top, Bottom, Left, Right'
	$listboxResPools.FormattingEnabled = $True
	$listboxResPools.Location = '330, 214'
	$listboxResPools.Name = 'listboxResPools'
	$listboxResPools.Size = '290, 95'
	$listboxResPools.Sorted = $True
	$listboxResPools.TabIndex = 6
	#
	# listboxVMs
	#
	$listboxVMs.Anchor = 'Top, Bottom, Left, Right'
	$listboxVMs.FormattingEnabled = $True
	$listboxVMs.Location = '12, 49'
	$listboxVMs.Name = 'listboxVMs'
	$listboxVMs.Size = '290, 134'
	$listboxVMs.Sorted = $True
	$listboxVMs.TabIndex = 3
	$listboxVMs.add_SelectedIndexChanged($listboxVMs_SelectedIndexChanged)
	#
	# txtOutput
	#
	$txtOutput.Anchor = 'Top, Bottom, Left, Right'
	$txtOutput.Location = '12, 460'
	$txtOutput.Multiline = $True
	$txtOutput.Name = 'txtOutput'
	$txtOutput.ReadOnly = $True
	$txtOutput.ScrollBars = 'Both'
	$txtOutput.Size = '608, 223'
	$txtOutput.TabIndex = 3
	$txtOutput.WordWrap = $False
	#
	# linklabelvCenter
	#
	$linklabelvCenter.Anchor = 'Top, Right'
	$linklabelvCenter.Location = '467, 9'
	$linklabelvCenter.Name = 'linklabelvCenter'
	$linklabelvCenter.Size = '153, 23'
	$linklabelvCenter.TabIndex = 1
	$linklabelvCenter.TabStop = $True
	$linklabelvCenter.Text = '(vCenter Server)'
	$linklabelvCenter.TextAlign = 'TopRight'
	$linklabelvCenter.add_LinkClicked($linklabelvCenter_LinkClicked)
	#
	# lnkUser
	#
	$lnkUser.Location = '12, 9'
	$lnkUser.Name = 'lnkUser'
	$lnkUser.Size = '153, 23'
	$lnkUser.TabIndex = 0
	$lnkUser.TabStop = $True
	$lnkUser.Text = '(Username)'
	$lnkUser.add_LinkClicked($lnkUser_LinkClicked)
	#
	# btnConnect
	#
	$btnConnect.Anchor = 'Bottom'
	$btnConnect.Location = '90, 689'
	$btnConnect.Name = 'btnConnect'
	$btnConnect.Size = '75, 23'
	$btnConnect.TabIndex = 2
	$btnConnect.Text = 'Connect'
	$btnConnect.UseVisualStyleBackColor = $True
	$btnConnect.add_Click($btnConnect_Click)
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	[string]$vCenterServerFQDN = $null
	[PSCredential]$creds = $null
	[boolean]$connected = $false
	
	#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
